import itertools
import math

def rail_fence_cipher(plaintext):
    plaintext = plaintext.replace(" ", "")
    l = len(plaintext)

    arr = []
    arr1 = []
    arr2 = []
    for i in range(l):
        if i % 2 == 0:
            arr1.append(plaintext[i])
        else:
            arr2.append(plaintext[i])
    arr.append(arr1)
    arr.append(arr2)

    ciphertext = ''
    for i in arr:
        for j in i:
            ciphertext += j

    return ciphertext

def rail_fence_decryption(ciphertext):
    length = len(ciphertext)
    half_length = length // 2

    arr1 = ciphertext[:half_length]
    arr2 = ciphertext[half_length:]

    decr = ''
    for i, j in itertools.zip_longest(arr1, arr2, fillvalue=None):
        if j is None:
            decr += i
        else:
            decr += i + j

    return decr

def book_cipher_encrption(plaintext, key):
    if len(key) != len(plaintext):
        return "Error: Key length and plaintext length must be the same."

    ciphertext = ""
    for i in range(len(plaintext)):
        char_plaintext = plaintext[i].upper()
        char_key = key[i].upper()

        if char_plaintext.isalpha() and char_key.isalpha():
            shift = (ord(char_plaintext) + ord(char_key) - 2 * ord("A")) % 26
            char_ciphertext = chr(shift + ord("A"))
            ciphertext += char_ciphertext
        else:
            ciphertext += char_plaintext

    return ciphertext

def book_cipher_decryption(ciphertext, key):
    if len(key) != len(ciphertext):
        return "Error: Key length and ciphertext length must be the same."

    plaintext = ""
    for i in range(len(ciphertext)):
        char_ciphertext = ciphertext[i].upper()
        char_key = key[i].upper()

        if char_ciphertext.isalpha() and char_key.isalpha():
            shift = (ord(char_ciphertext) - ord(char_key)) % 26
            char_plaintext = chr(shift + ord("A"))
            plaintext += char_plaintext
        else:
            plaintext += char_ciphertext

    return plaintext


# Test the functions
plain_rail = input("Enter plaintext for Rail Fence Cipher: ")
cipher_rail = rail_fence_cipher(plain_rail)
print("Rail Fence Ciphertext:", cipher_rail)
decrypt_rail = rail_fence_decryption(cipher_rail)
print("Rail Fence Decryption:", decrypt_rail)

plaintext_book = input("Enter plaintext for Book Cipher: ")
key_book = input("Enter key with length same as plaintext: ")
ciphertext_book = book_cipher_encrption(plaintext_book, key_book)
print("Book Cipher Ciphertext:", ciphertext_book)
plaintext_book = book_cipher_decryption(ciphertext_book, key_book)
print("Book Cipher Plaintext:", plaintext_book)

# Python3 implementation of
# Columnar Transposition
# Encryption
def encryptMessage(msg):
	cipher = ""

	# track key indices
	k_indx = 0

	msg_len = float(len(msg))
	msg_lst = list(msg)
	key_lst = sorted(list(key))

	# calculate column of the matrix
	col = len(key)
	
	# calculate maximum row of the matrix
	row = int(math.ceil(msg_len / col))

	# add the padding character '_' in empty
	# the empty cell of the matix
	fill_null = int((row * col) - msg_len)
	msg_lst.extend('_' * fill_null)

	# create Matrix and insert message and
	# padding characters row-wise
	matrix = [msg_lst[i: i + col]
			for i in range(0, len(msg_lst), col)]

	# read matrix column-wise using key
	for _ in range(col):
		curr_idx = key.index(key_lst[k_indx])
		cipher += ''.join([row[curr_idx]
						for row in matrix])
		k_indx += 1

	return cipher

# Decryption
def decryptMessage(cipher):
	msg = ""

	# track key indices
	k_indx = 0

	# track msg indices
	msg_indx = 0
	msg_len = float(len(cipher))
	msg_lst = list(cipher)

	# calculate column of the matrix
	col = len(key)
	
	# calculate maximum row of the matrix
	row = int(math.ceil(msg_len / col))

	# convert key into list and sort
	# alphabetically so we can access
	# each character by its alphabetical position.
	key_lst = sorted(list(key))

	# create an empty matrix to
	# store deciphered message
	dec_cipher = []
	for _ in range(row):
		dec_cipher += [[None] * col]

	# Arrange the matrix column wise according
	# to permutation order by adding into new matrix
	for _ in range(col):
		curr_idx = key.index(key_lst[k_indx])

		for j in range(row):
			dec_cipher[j][curr_idx] = msg_lst[msg_indx]
			msg_indx += 1
		k_indx += 1

	# convert decrypted msg matrix into a string
	try:
		msg = ''.join(sum(dec_cipher, []))
	except TypeError:
		raise TypeError("This program cannot", "handle repeating words.")

	null_count = msg.count('_')

	if null_count > 0:
		return msg[: -null_count]

	return msg

# Driver Code
msg = input("ENTER PLaintext: ")
key = input("Enter Key: ")
cipher = encryptMessage(msg)
print("Encrypted Message: {}".format(cipher))

print("Decryped Message: {}".format(decryptMessage(cipher)))
