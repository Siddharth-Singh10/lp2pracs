#include<iostream>
#include<algorithm>

using namespace std;

class Edge
{
    public:
    int source;
    int dest;
    int weight;

};

int findParent(int v, int *parent)
{
    if(parent[v]==v)
        return v;
    else 
        return findParent(parent[v], parent);
}

bool compare(Edge e1, Edge e2)
{
    return e1.weight<e2.weight;
}

void kruskals(Edge *input, int n, int E)
{
    //Sort array in ascending order based on weights
    sort(input, input+E, compare);

    Edge *output = new Edge[n-1];
    int *parent=new int[n];

    for(int i=0; i<n; i++)
    {
        parent[i] = i;
    }
    int count=0, i=0;
    while(count!=n-1)
    {
        Edge currentEdge = input[i];

        //if we can add edge in MST or not
        int sourceParent = findParent(currentEdge.source, parent);
        int destParent = findParent(currentEdge.dest, parent);

        if(sourceParent!=destParent)
        {
            output[count]=currentEdge;
            count++;
            parent[sourceParent]=destParent;
        }
        i++;
    }

    int mincost=0;
    for(int j=0;j< n-1;j++)
    {
        mincost += output[j].weight;
    }
    //printing MST
    cout<<"\nMST: "<<endl;
    for(int i=0; i<n-1; i++)
    {
        if(output[i].source < output[i].dest)
        {
            cout<<output[i].source<<" "<<output[i].dest<<" "<<output[i].weight<<endl;
        }
        else
        {
            cout<<output[i].dest<<" "<<output[i].source<<" "<<output[i].weight<<endl;
        }
    }
    cout<<"Minimum cost = "<<mincost;
}

int main()
{
    int n, E;
    cout<<"Enter number of vertices and edges: "<<endl;
    cin>>n>>E;
    Edge *input = new Edge[E];
    cout<<"ENTER EDGE AS\nSTARTING_VERTEX  ENDING_VERTEX  WEIGHT:\n";
    for(int i=0; i<E; i++)
    {
        int s, d, w;
        cin>>s>>d>>w;
        input[i].source=s;
        input[i].dest=d;
        input[i].weight=w; 
    }
    kruskals(input, n, E);
    return 0;
}

/*
Enter number of vertices and edges: 
7 8
ENTER EDGE AS
STARTING_VERTEX  ENDING_VERTEX  WEIGHT:
0 1 8
1 3 9
1 4 1
1 2 4
2 5 20
3 6 7
4 6 1
5 6 19

MST:
1 4 1
4 6 1
1 2 4
3 6 7
0 1 8
5 6 19
Minimum cost = 40*/